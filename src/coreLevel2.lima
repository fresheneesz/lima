
nil = coreLevel1['nil']
true = coreLevel1['true']
false = coreLevel1['false']
wout = coreLevel1['wout']
jump = coreLevel1['jump']

; macros
rawFn = coreLevel1['rawFn']~
macro = coreLevel1['macro']~
if = coreLevel1['if']~
var = coreLevel1['var']~



;[

;[ requires a subset of lima to run:
    * nil with:
        * operators ~> = ~ ??
        *
    * object literals with:
        * operator overloading constructs
        * mix
        * macro
        * all core attributes
        * operators ~> [] .
        *
    * fn
    * meta
;]

var false = 0
var true = 1

var private = rawMacro chars:
    ; ...

var access = rawMacro chars:
    ; ...

var macro = rawMacro chars:
    ; ...

var while = macro charsBefore charsInside:
    ; ...

private:
 var augmentedNil = { mix[nil]

    postOperator[~] = fn:
        var originalObj ~> this
        var originalEquals = meta[originalObj].operators[=]
        return {
            mix[this[! operator[~] operator[~>]]] ; remove these operators
            operator[>] = fn this x:
                ret meta[originalObj].operators[~>].withCallingScope[callingScope][originalObj x]
            operator[=] = fn: // copy operator
                return originalObj
             this x:
                originalObj = x
        }

    postOperator[?] = fn:
        ret {
            operator[.] = fn:
                ret nil
            operator[=] = fn:
                ret {}
        }

    operator[|] = fn this x:
        if this==nil:
            ret this~
         else:
            ret x~

    operator[!??] = fn x:
        ret !(this??x)
    operator[!=] = fn x:
        ret !(this==x)

    str = fn:
        ret 'nil'
 }

 var augmentedNumber = { mix[0]

 }

 var augmentedString = { mix[""]
    hashcode = access[get=fn: ret ]
 }

 var augmentedObject = {
    hashcode = access[get=fn: ret this.str]

    override operator[==] = fn x:
        if meta[x].properties.len != meta[this].properties.len:
            ret false
        df meta[this].properties value key:
            if meta[x].properties[key] != value:
                ret false
        ;; else
        ret true

    override operator[|] = fn this x:
        ret this

    override str = fn:
        var resultList = {}
        df this value key:
            resultList.=ins[key.str':'value.str]
        return '{'.cat[resultList.join['' a.cat[','b]] '}']

    ins = fn
     value:
        thisfn[meta[this].elements value]
     key sequence...:
        ;; todo:
        ;;var props ~> meta[this].properties
        ;;props[meta[this].elements] = value


    len = fn:
        ret meta[this].elements
 }

nil = augmentedNil
0 = augmentedNumber
"" = augmentedString
{} = augmentedObject

;; lock in the core objects
var itemsToLock = reflist[nil 0 "" {} true false]
df itemsToLock item:
    meta[item].const = true



// OPERATORS FOR NIL:
//
//        '~': {
//            type:'postfix', dispatch: [
//                {fn: function() {
//                    var value = this.copy()
//                    // remove these operators:
//                    delete value.meta.operators['~']
//                    delete value.meta.operators['~>']
//                    value.meta.operators['>'] = {
//                        type:'binary', order:9, dispatch: [
//                            {parameters:[{name:'rvalue',type:'var'}], fn: function(rvalue) {
//                                this.meta.operators = refOperators(rvalue)
//                            }}
//                        ]
//                    }
//                    value.meta.operators['='] = newEqualsOperator()
//                    value.meta.operators['='][1].fn = function() {
//                        return this.copy() // copy operator returns the original value (with the ~ and ~> operators in place)
//                    }
//                    return value
//                }}
//            ]
//        },
//        '?': {
//            type:'postfix', order:9, dispatch: [
//                {parameters:[],
//                 fn: function() {
//                    var value = Object()
//                    value.meta.operators['.'] = {
//                        type:'binary', dispatch: [{
//                            parameters:[], fn: function(name, value) {
//                                 return Nil()
//                            }
//                        }]
//                    }
//                    value.meta.operators['='] = {
//                        type:'binary', dispatch: [{
//                            parameters:[], fn: function() { // copy operator
//                                 return Object()   // return normal empty object
//                            }
//                        }]
//                    }
//
//                    return value
//                }}
//            ]
//        },
//        '|': {
//            type:'binary', order:9, dispatch: [
//                {parameters:[{name:'a',type:'var'},{name:'b',type:'var'}], fn: function(a,b) {
//                    if(!isNil(a))
//                        return a
//                    else
//                        return b
//                }}
//            ]
//        },
//        '!??': {
//            type:'binary', order:6, dispatch: [
//                {parameters:[{name:'a',type:'var'},{name:'b',type:'var'}], fn: function(a,b) {
//                    return callFunction(this.operators['??'], this.callingScope, [a,b])
//                }}
//            ]
//        },
//        '!=': {
//            type:'binary', order:6, dispatch: [
//                {parameters:[{name:'a',type:'var'},{name:'b',type:'var'}], fn: function(a,b) {
//                    return callFunction(this.operators['=='], this.callingScope, [a,b])
//                }}
//            ]
//        }


//var fn = macro(function(context, rawInput) {
//    var firstLineAst = macroParsers.parseBlockFirstLine().tryParse(rawInput)
//
//    /* First line cases:
//
//        fn
//        fn params:
//        fn[ params:
//        fn[ params: expression
//        fn[ params: expression
//        ]
//        fn[ params: expression ]
//        fn[ params: expression ] more expressions
//
//       Non-cases:
//        fn params: expression  moreParams: moreExpressions
//        fn[params: expression  moreParams: moreExpressions]
//
//     */
//
//    var possibleMacroError = false // assume false until proven otherwise
//    var body = rawInput // assume this until proven otherwise too
//    if(firstLineAst.openingBracket && firstLineAst.contains(']')) { // macros could eat the end of the function
//        // todo: this needs to be passed up somehow so if there's a parsing error, the runtime can tell you it might be macro weirdness in the function's first line. This would happen either if a macro was expected to consume input and didn't, or if it was expected not to and did.
//        possibleMacroError = true // if a syntax error occurs, it might be the fault of a macro
//        var macroEvaluationContext = createMacroConsumptionContext(context)
//        var bodyFirstLineInfo = evaluate.fnFirstLineMacroConsumption(macroEvaluationContext, firstLineAst.body, /*endBracketPossible=*/true)
//        if(bodyFirstLineInfo.endReached) {
//            body = bodyFirstLineInfo.body
//        }
//    }
//
//    var ast = macroParsers.functionBody(/*endBracketPossible=*/true).tryParse(body)
//
//    return {
//        consume: rawInput.length,
//        run: FunctionObj(undefined, {
//            match: function(args) {
//                for(var n=0; n<ast.length; n++) {
//                    var block = ast[n]
//                    var blockInfo = evaluate.fnParams(block)
//                    var normalizedArgs = utils.getNormalizedArgs(this.get('this'), blockInfo.params, args)
//                    if(normalizedArgs !== undefined) {
//                        return {
//                            args: normalizedArgs,
//                            params: blockInfo.params,
//                            body: blockInfo.body
//                        }
//                    }
//                }
//
//
//            },
//            fn: function(callInfo) {
//                var retPtr = {}
//                var functionContext = createFunctionContext(this, retPtr, function(name, value, isPrivate, functionContext, functionScope) {
//                    if(functionContext.scope.get(name) === undefined)
//                        throw new Error("Variable "+name+" undeclared!")
//
//                    functionScope[name] = value
//                })
//
//                setArgumentsOnParameters(functionContext, callInfo.params, callInfo.args)
//
//                for(var j=0; j<callInfo.body.length; j++) {
//                    var body = callInfo.body[j]
//                    if(utils.isNodeType(body, 'superExpression')) {
//                        var parts = body.parts
//                    } else {
//                        var parts = [body.parts]
//                    }
//
//                    while(parts.length > 0) {
//                        var result = evaluate.superExpression(functionContext, parts, {allowProperties:false, implicitDeclarations:false})
//                        parts = result.remainingParts
//                        if(retPtr.returnValue !== undefined) {
//                            return retPtr.returnValue
//                        }
//                    }
//                }
//            }
//        })
//    }
//
//
//    function createFunctionContext(context, retPtr, setFn) {
//        var functionScope = {}
//        var functionContext = {
//            this: context.this,
//            scope: utils.ContextScope(
//                function get(name) {
//                    if(name in functionScope) {
//                        return functionScope[name]
//                    } else {
//                        return context.scope.get(name)
//                    }
//                },
//                function set(name, value, isPrivate) {
//                    setFn(name, value, isPrivate, functionContext, functionScope)
//                }
//            )
//        }
//
//        functionScope.ret = createRetMacro(retPtr, functionContext)
//
//        return functionContext
//    }
//
//    function createMacroConsumptionContext(context) {
//        return createFunctionContext(context, {}, function(name, value, isPrivate, functionContext, functionScope) {
//            throw new Error("Can't overwrite variable "+name+" from an upper scope inside a macro " +
//                "consumption function (mutations should be done in the `run` function).")
//        })
//    }
//
//    function createRetMacro(retPtr, functionContext) {
//        return macro(function(input) {
//            var ast = macroParsers.retStatement().tryParse(input)
//            var result = evaluate.superExpression(functionContext, [ast[0]], {allowProperties:false, implicitDeclarations:false})
//            retPtr.returnValue = result.value
//            return {
//                consume: input.length - ast[1].length,
//                run: function() {return nil}
//            }
//        })
//    }
//})


//* partial implementation of make (missing some necessary things - can't remember what at the moment: unmake?)
//
//var make = macro input:
//  varparse:
//    seq[ lima.ws '['
//      alt[lima.fnBody seq['unmake' lima.ws ':' lima.superExpression.many]
//    ]
// var scopeObject ~> callingScope.this
// var originalBracketOp = meta[scopeObject].operators['[']
// meta[scopeObject].operators['['] = ret fn:
//   var x = scopeObject
//   meta[x].operators['['] = originalBracketOp
//   callback[x]
//   ret x
//
//* OLD partial implementation of make (missing some necessary things - can't remember what at the moment)
//    var make = fn:
//      var scopeObject ~> callingScope.this
//      var originalBracketOp = meta[scopeObject].operators['[']
//      meta[scopeObject].operators['['] = ret fn:
//        var x = scopeObject
//        meta[x].operators['['] = originalBracketOp
//        callback[x]
//        ret x


//// number postfix for base 'x'
//baseX: function() {
//    return seq(
//        this.integer(10).chain(function(int) {     // check if the base is too large
//            var base = int.numerator
//            if(base > 36) {
//                return fail("A base not greater than 36")
//            } else {
//                return succeed(base)
//            }
//        }.bind(this)),
//        one('xX')
//    )
//    .map(function(header) {
//        return header[0]
//    }).chain(function(base) {
//        return this.real(base)
//    }.bind(this))
//},

;]